-- Step 1: Generate a series of week start dates for the past 6 months
WITH weeks AS (
    SELECT
        generate_series(
            date_trunc('week', NOW() - INTERVAL '6 months'),  -- Start date: beginning of the week, 6 months ago
            date_trunc('week', NOW()),                        -- End date: beginning of the current week
            '1 week'::interval                                -- Interval: 1 week
        ) AS week_start                                       -- Alias for the generated dates
),

-- Step 2: Aggregate login counts per user per week
logins AS (
    SELECT 
        user_id,
        date_trunc('week', login_time) AS week_start,        -- Truncate login_time to the start of the week
        COUNT(*) AS login_count                              -- Count the number of logins per user per week
    FROM 
        user_logins
    WHERE 
        login_time >= NOW() - INTERVAL '6 months'            -- Filter logins to the past 6 months
        AND login_time < NOW()                               -- Ensure logins are up to the current time
    GROUP BY 
        user_id, week_start                                  -- Group by user and week start
)

-- Step 3: Combine the weeks and logins data, ensuring all weeks are included
SELECT
    w.week_start,                                            -- Select week start date
    l.user_id,                                               -- Select user ID
    COALESCE(l.login_count, 0) AS login_count                -- Ensure login count is 0 if no logins for that week
FROM 
    weeks w
LEFT JOIN 
    logins l
ON 
    w.week_start = l.week_start                              -- Join on week start date
ORDER BY 
    w.week_start,                                            -- Order by week start
    l.user_id;                                               -- Then by user ID
----------------------------------------------------------------------------------------------------------------------------

WITH WeeklyLogins AS (
  SELECT 
    u.username,  -- Replace 'username' with the actual username column name
    DATE_TRUNC('week', ul.login_time) AS login_week,  -- Truncate to week
    COUNT(*) AS login_count
  FROM user_logins ul
  INNER JOIN users u ON ul.user_id = u.id
  GROUP BY u.username, DATE_TRUNC('week', ul.login_time)
)
SELECT *
FROM WeeklyLogins
WHERE login_week >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)  -- Filter last 6 months
ORDER BY username, login_week ASC;  -- Order by username and login week
--------------------------------------------------------------------------------------------------------------------------------

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule headers_module modules/mod_headers.so

LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" \"%{Authorization}i\"" export_log
CustomLog "/path/to/your/export_log_file.log" export_log env=export_url

RewriteEngine On
RewriteCond %{REQUEST_URI} /export [NC]
RewriteRule .* - [E=export_url:1]

Header add export_url "%{export_url}e"


# Define a custom log format
LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" export_log_format

# Set environment variable for requests containing "export"
SetEnvIf Request_URI "export" export_request

# Log requests containing "export" to a separate file
CustomLog logs/export_requests.log export_log_format env=export_request


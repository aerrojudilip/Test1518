import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.*;

public class RestApiCallerJava8 {

    public static void main(String[] args) {
        List<String> urls = List.of(
                "https://jsonplaceholder.typicode.com/posts/1",
                "https://jsonplaceholder.typicode.com/posts/2",
                "https://invalid.url"
        );

        // Thread pool with fixed number of threads
        ExecutorService executorService = Executors.newFixedThreadPool(5);

        // Process the API requests
        ApiResult result = processApiRequests(urls, executorService);

        // Print results
        System.out.println("Successful Responses: " + result.getSuccessResponses());
        System.out.println("Failed Requests: " + result.getFailedRequests());

        // Shut down the executor service
        executorService.shutdown();
    }

    public static ApiResult processApiRequests(List<String> urls, ExecutorService executorService) {
        List<Future<ApiResponse>> futures = new ArrayList<>();
        List<String> successResponses = Collections.synchronizedList(new ArrayList<>());
        List<String> failedRequests = Collections.synchronizedList(new ArrayList<>());

        for (String url : urls) {
            futures.add(executorService.submit(() -> {
                try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
                    HttpGet request = new HttpGet(url);
                    try (CloseableHttpResponse response = httpClient.execute(request)) {
                        String responseBody = EntityUtils.toString(response.getEntity());
                        return new ApiResponse(url, responseBody, null);
                    }
                } catch (Exception e) {
                    return new ApiResponse(url, null, e.getMessage());
                }
            }));
        }

        for (Future<ApiResponse> future : futures) {
            try {
                ApiResponse apiResponse = future.get();
                if (apiResponse.getError() == null) {
                    successResponses.add(apiResponse.getResponse());
                } else {
                    failedRequests.add(apiResponse.getRequestUrl());
                }
            } catch (InterruptedException | ExecutionException e) {
                // Handle exception
                e.printStackTrace();
            }
        }

        return new ApiResult(successResponses, failedRequests);
    }

    static class ApiResponse {
        private final String requestUrl;
        private final String response;
        private final String error;

        public ApiResponse(String requestUrl, String response, String error) {
            this.requestUrl = requestUrl;
            this.response = response;
            this.error = error;
        }

        public String getRequestUrl() {
            return requestUrl;
        }

        public String getResponse() {
            return response;
        }

        public String getError() {
            return error;
        }
    }

    static class ApiResult {
        private final List<String> successResponses;
        private final List<String> failedRequests;

        public ApiResult(List<String> successResponses, List<String> failedRequests) {
            this.successResponses = successResponses;
            this.failedRequests = failedRequests;
        }

        public List<String> getSuccessResponses() {
            return successResponses;
        }

        public List<String> getFailedRequests() {
            return failedRequests;
        }
    }
}
